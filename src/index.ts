#!/usr/bin/env node

import { program } from 'commander';
import fs from 'fs/promises';
import path from 'path';

program
  .version('1.0.0')
  .description('Generate a nested path object from a directory structure.')
  .argument('<source>', 'The source directory to scan.')
  .option('-o, --output <file>', 'The output file name.', 'path-codegen.ts')
  .action(async (source: string, options: { output: string }) => {
    try {
      const sourcePath = path.resolve(source);
      const outputPath = path.resolve(options.output);

      const constantName = path.basename(sourcePath)
        .toUpperCase()
        .replace(/[^A-Z0-9_]/g, '_');

      console.log(`Scanning directory: ${sourcePath}`);
      console.log(`Output will be written to: ${outputPath}`);

      const tree = await buildPathTree(sourcePath, sourcePath);
      const code = generateCodeFromTree(tree, constantName);
      await fs.writeFile(outputPath, code);

      console.log('Successfully generated path object!');
    } catch (error) {
      console.error('An error occurred:', error);
      process.exit(1);
    }
  });

program.parse(process.argv);

async function buildPathTree(dir: string, rootDir: string): Promise<object> {
  const entries = await fs.readdir(dir, { withFileTypes: true });
  const tree: { [key: string]: any } = {};

  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);
    const relativePath = '/' + path.relative(rootDir, fullPath);
    const key = path.parse(entry.name).name;

    if (entry.isDirectory()) {
      tree[key] = await buildPathTree(fullPath, rootDir);
    } else {
      tree[key] = relativePath;
    }
  }
  return tree;
}

function generateCodeFromTree(tree: object, constantName: string): string {
  const header = `// This file is auto-generated by path-codegen. Do not edit.\n\n`;
  const objectString = JSON.stringify(tree, null, 2)
    .replace(/'/g, "'" ) // Corrected: escaped single quotes within template literals
    .replace(/"([^(")"]+)":/g, '$1:'); // Remove quotes from keys

  return `${header}export const ${constantName} = ${objectString} as const;\n`;
}
